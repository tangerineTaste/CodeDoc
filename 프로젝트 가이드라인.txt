프로젝트: 지능형 금융 비서 개발
- RAG 기반 금융 상담과 AI 개인화 추천의 결합 -
1. 프로젝트 비전: 무엇을 만들고자 하는가?
본 프로젝트의 최종 목표는 단순한 정보 제공을 넘어, 각 사용자의 상황과 투자 성향을 깊이 이해하고 
최적의 금융 포트폴리오를 제안하는 **'개인화된 금융 AI '**를 구축. 
이를 위해, 두 개의 독립적이면서도 유기적으로 연결된 AI 엔진을 개발.

지식 상담원 (RAG 챗봇): 복잡하고 방대한 금융 법률 및 상품 정보에 대해 정확한 답변을 제공합.

개인 PB (추천 AI 모델): 사용자의 프로필을 분석하여, 5대 핵심 금융상품에 대한 가입 확률을 예측하고 개인화된 추천을 제공.

2. 시스템 아키텍처
시스템은 다음과 같은 구조로 작동. 사용자는 웹 인터페이스를 통해 두 AI 엔진과 상호작용하며, 
모든 데이터와 로직은 Django 백엔드에서 관리.

[사용자] <=> [웹 UI (React/Vue)] <=> [Django 백엔드 서버]
                                           |
                    +----------------------+----------------------+
                    |                                             |
        [엔진 1: RAG 금융 상담 챗봇]                     [엔진 2: 금융상품 추천 AI]
        - Vector DB (Pinecone)                             - AI 모델
        - LLM (OpenAI GPT-5-nano)                          - 사용자 DB (회원 정보)
        - Upstage 임베딩 모델                               - SCF 데이터셋 (사전 훈련)

3. 개발 플로우 (Phase별 상세 설명)
Phase 1: 두뇌 구축 - AI 엔진 사전 개발 단계

1-1. RAG 챗봇의 '지식 라이브러리' 구축:

데이터 수집: 금융위원회, 금융보안원 등에서 공개하는 수십 종의 금융 법률, 시행령, 감독규정 원문(.docx)을 수집.

데이터 정제 및 청킹: 수집된 문서의 품질을 저해하는 노이즈를 제거하고, 단순 글자 수 분할의 한계를 극복하기 위해 
					'구조 기반 청킹(Structural Chunking)' 기법을 사용. 정규표현식을 활용하여 법률 문서의 
					'제N조' 단위를 하나의 의미 있는 덩어리로 정확하게 분할.

임베딩 및 Vector DB 저장: 정제된 텍스트 조각들을 Upstage의 solar-embedding-1-large 모델로 벡터화하여, 
						  Pinecone Vector DB에 저장했습니다. 이 과정을 통해 질문의 의미와 가장 유사한 
						  법률 조항을 빠르고 정확하게 검색할 수 있는 기반을 다짐.

1-2. 추천 AI의 '예측 능력' 사전 훈련:

데이터 확보 및 분석: 미국 소비자 금융 조사(SCF) 데이터셋을 활용하여, 수만 명의 인구통계학적 정보와 실제 
				    금융상품 보유 현황을 분석. EDA를 통해 '소득', '연령', '직업', '금융위험감수도' 
					등이 상품 선택에 미치는 핵심 변수임을 확인.

다중 레이블 모델링: 사용자가 여러 상품을 동시에 보유할 수 있는 현실을 반영하기 위해, 
				   '다중 레이블 분류(Multi-label Classification)' 모델을 채택. 
				   5대 핵심 금융상품(CDS, NMMF, STOCKS, RETQLIQ,MMMF)의 보유 여부를 동시에 예측하도록 설계.

불균형 데이터 해결 및 모델 최적화: CDS(정기예금)와 같이 가입자 수가 매우 적은 상품의 예측 
								 성능을 높이기 위해, 훈련 시작점을 조정하는 
								 **'초기 편향 설정(Initial Bias Setting)'**과 각 상품별 
								 '최적 임계값(Optimal Threshold)' 탐색 기법을 적용하여 모델의 
								 전반적인 예측 성능과 안정성을 극대화.

Phase 2: 실시간 상호작용 - 사용자 서비스 플로우
사용자가 웹 서비스를 이용할 때, 두 AI 엔진은 다음과 같은 흐름으로 상호작용.

일반 금융 상담 (RAG 챗봇): 사용자가 "연말정산에 유리한 상품이 뭐예요?"와 같은 일반적인 질문을 하면, 
						  RAG 챗봇이 Vector DB를 검색하여 관련 법률 조항과 상품 정보를 바탕으로 정확한 답변을 제공.

사용자 프로필 수집: 챗봇은 채팅을 통해 사용자의 연령, 소득 수준, 투자 경험, 위험 선호도 등 추천 모델에 필요한 핵심 정보를 수집.

추천 AI 모델 호출: 수집된 사용자 프로필 데이터를 Django 백엔드에서 사전 훈련된 AI 모델의 입력값으로 전달.

개인화 예측 결과 생성: 모델은 해당 사용자의 5대 금융상품별 가입 확률을 예측하여 반환. (예: STOCKS: 85%, RETQLIQ: 70%, CDS: 15% 등)

최종 추천안 제시: 챗봇은 이 확률 값을 해석하여, 금융상품 페이지에서 선택 확률이 높았던 금융 상품을 추천.
