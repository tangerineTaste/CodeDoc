# management/commands/test_recommendations.py\nfrom django.core.management.base import BaseCommand\nfrom django.contrib.auth.models import User\nfrom product_recommendation.category_recommendations import get_category_recommendations_for_user\n\nclass Command(BaseCommand):\n    help = 'AI 추천 시스템 테스트'\n    \n    def handle(self, *args, **options):\n        # 테스트용 사용자 찾기\n        try:\n            user = User.objects.filter(is_active=True).first()\n            if not user:\n                self.stdout.write(self.style.ERROR('활성화된 사용자가 없습니다.'))\n                return\n                \n            if not hasattr(user, 'profile'):\n                self.stdout.write(self.style.ERROR(f'사용자 {user.username}에게 프로필이 없습니다.'))\n                return\n                \n            self.stdout.write(f'사용자 {user.username}에 대한 AI 추천 테스트 시작...')\n            \n            # 카테고리별 추천 테스트\n            recommendations = get_category_recommendations_for_user(user)\n            \n            if recommendations:\n                self.stdout.write(self.style.SUCCESS(f'추천 완료: {len(recommendations)}개 카테고리'))\n                for category, products in recommendations.items():\n                    self.stdout.write(f'- {category}: {len(products)}개 상품')\n                    for i, product in enumerate(products, 1):\n                        self.stdout.write(f'  {i}. {product[\"fin_prdt_nm\"]} ({product[\"kor_co_nm\"]})')\n            else:\n                self.stdout.write(self.style.WARNING('추천 결과가 없습니다.'))\n                \n        except Exception as e:\n            self.stdout.write(self.style.ERROR(f'오류 발생: {e}'))\n            import traceback\n            self.stdout.write(traceback.format_exc())\n